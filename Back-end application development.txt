Task 1: Get the book list available in the shop (2 pts)

const express = require('express');
const app = express();

// Sample data representing a list of books
const books = [
  { id: 1, title: 'Book 1', author: 'Author 1' },
  { id: 2, title: 'Book 2', author: 'Author 2' },
  { id: 3, title: 'Book 3', author: 'Author 3' },
];

// Route to get the list of books
app.get('/books', (req, res) => {
  res.json(books);
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


Task 2: Get the books based on ISBN (2 pts)


// Route to get a book by ISBN
app.get('/books/:isbn', (req, res) => {
  const isbn = req.params.isbn;
  const book = books.find(b => b.isbn === isbn);
  if (!book) {
    return res.status(404).json({ message: 'Book not found' });
  }
  res.json(book);
});


Task 3: Get all books by Author. (2 pts)

// Route to get all books by author
app.get('/books/author/:author', (req, res) => {
  const author = req.params.author;
  const authorBooks = books.filter(b => b.author === author);
  res.json(authorBooks);
});


Task 4: Get all books based on Title (2 pts)

// Route to get all books by title
app.get('/books/title/:title', (req, res) => {
  const title = req.params.title;
  const titleBooks = books.filter(b => b.title === title);
  res.json(titleBooks);
});


Task 5: Get a book Review. (2 pts )

// Sample data representing book reviews
const reviews = [
  { bookId: 1, review: 'Great book!' },
  { bookId: 2, review: 'Not bad.' },
  { bookId: 3, review: 'Could be better.' },
];

// Route to get the review of a book
app.get('/books/review/:bookId', (req, res) => {
  const bookId = parseInt(req.params.bookId);
  const review = reviews.find(r => r.bookId === bookId);
  if (!review) {
   
Task 6: Register New user (3 pts)

// Sample data representing registered users
let users = [];

// Route to register a new user
app.post('/register', (req, res) => {
  const { username, email, password } = req.body;
  // Check if user already exists
  if (users.find(u => u.email === email)) {
    return res.status(400).json({ message: 'User already exists' });
  }
  // Create a new user object
  const newUser = { id: users.length + 1, username, email, password };
  // Add the new user to the list of registered users
  users.push(newUser);
  res.json(newUser);
});


Task 7: Login as a Registered user (3 pts)

// Route to log in as a registered user
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  // Check if user exists
  const user = users.find(u => u.email === email && u.password === password);
  if (!user) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }
  res.json({ message: 'Login successful', user });
});


Task 8: Add/Modify a book review. (2 pts )

// Route to add or modify a book review for a registered user
app.post('/books/:bookId/review', (req, res) => {
  const { userId, review } = req.body;
  const bookId = parseInt(req.params.bookId);
  // Check if user exists
  const user = users.find(u => u.id === userId);
  if (!user) {
    return res.status(401).json({ message: 'User not found' });
  }
  // Check if book exists
  const book = books.find(b => b.id === bookId);
  if (!book) {
    return res.status(404).json({ message: 'Book not found' });
  }
  // Add or update the review for the book by the user
  const userReviewIndex = reviews.findIndex(r => r.bookId === bookId && r.userId === userId);
  if (userReviewIndex !== -1) {
    reviews[userReviewIndex].review = review;
  } else {
    reviews.push({ userId, bookId, review });
  }
  res.json({ message: 'Review added/modified successfully' });
});


Task 9: Delete book review added by that particular user (2 pts)

// Route to delete a book review added by a registered user
app.delete('/books/:bookId/review', (req, res) => {
  const { userId } = req.body;
  const bookId = parseInt(req.params.bookId);
  // Check if user exists
  const user = users.find(u => u.id === userId);
  if (!user) {
    return res.status(401).json({ message: 'User not found' });
  }
  // Check if the user has a review for the book
  const userReviewIndex = reviews.findIndex(r => r.bookId === bookId && r.userId === userId);
  if (userReviewIndex === -1) {
    return res.status(404).json({ message: 'Review not found' });
  }
  // Delete the review for the book by the user
  reviews.splice(userReviewIndex, 1);
  res.json({ message: 'Review deleted successfully' });
});


Task 10: Get all books – Using async callback function (2 pts)


// Method to get all books using an async callback function
const getAllBooksAsync = async (callback) => {
  try {
    // Simulate asynchronous operation (e.g., fetching data from a database)
    setTimeout(() => {
      callback(null, books);
    }, 1000);
  } catch (error) {
    callback(error, null);
  }
};

// Example usage
getAllBooksAsync((error, books) => {
  if (error) {
    console.error('Error:', error);
    return;
  }
  console.log('All Books:', books);
});



Task 11: Search by ISBN – Using Promises (2 pts)

const axios = require('axios');

function searchBookByISBN(isbn) {
  return new Promise((resolve, reject) => {
    axios.get(`http://localhost:3000/books/isbn/${isbn}`)
      .then(response => {
        resolve(response.data);
      })
      .catch(error => {
        reject(error);
      });
  });
}

// Example usage
const isbn = '1234567890';
searchBookByISBN(isbn)
  .then(book => {
    console.log('Book found:', book);
  })
  .catch(error => {
    console.error('Error searching for book by ISBN:', error);
  });

Task 12: Search by Author (2pts)

const axios = require('axios');

function searchBookByISBN(isbn) {
  return new Promise((resolve, reject) => {
    axios.get(`http://localhost:3000/books/isbn/${isbn}`)
      .then(response => {
        resolve(response.data);
      })
      .catch(error => {
        reject(error);
      });
  });
}

// Example usage
const isbn = '1234567890';
searchBookByISBN(isbn)
  .then(book => {
    console.log('Book found:', book);
  })
  .catch(error => {
    console.error('Error searching for book by ISBN:', error);
  });
const axios = require('axios');

function searchBooksByAuthor(author) {
  return new Promise((resolve, reject) => {
    axios.get(`http://localhost:3000/books/author/${author}`)
      .then(response => {
        resolve(response.data);
      })
      .catch(error => {
        reject(error);
      });
  });
}

// Example usage
const author = 'J.K. Rowling';
searchBooksByAuthor(author)
  .then(books => {
    console.log('Books by author:', books);
  })
  .catch(error => {
    console.error('Error searching for books by author:', error);
  });



Task 13: Search by Title (2 pts)

const axios = require('axios');

function searchBooksByTitle(title) {
  return new Promise((resolve, reject) => {
    axios.get(`http://localhost:3000/books/title/${title}`)
      .then(response => {
        resolve(response.data);
      })
      .catch(error => {
        reject(error);
      });
  });
}

// Example usage
const title = 'Harry Potter';
searchBooksByTitle(title)
  .then(books => {
    console.log('Books by title:', books);
  })
  .catch(error => {
    console.error('Error searching for books by title:', error);
  });



